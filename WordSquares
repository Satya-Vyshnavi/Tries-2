T.c --> O(NL)

class Solution {
    class TrieNode{
        TrieNode[] children;
        List<String> startsWith;
        public TrieNode(){
            children = new TrieNode[26];
            startsWith = new ArrayList<>(); 
        }
    }
    TrieNode root;
    public void insert(String word){
         TrieNode curr = root;
         for(int i = 0; i<word.length(); i++){
            char c = word.charAt(i);
            if(curr.children[c-'a'] == null){
                curr.children[c-'a'] = new TrieNode();
            }
            curr = curr.children[c-'a'];
            curr.startsWith.add(word);  
         }
    }

    public List<String> startsWith(String word){
         TrieNode curr = root;
         for(int i = 0; i<word.length(); i++){
            char c = word.charAt(i);
            if(curr.children[c-'a'] == null){
                return new ArrayList<>();
            }
            curr = curr.children[c-'a'];
         }
         return curr.startsWith;
    }

    List<List<String>> result = new ArrayList<>();
    public List<List<String>> wordSquares(String[] words) {
        root = new TrieNode();
        for(String word: words){
            insert(word);
        }
        List<String> li = new ArrayList<>();
        for(int i =0; i<words.length; i++){
            //action
            li.add(words[i]);
            //recurse
            backtrack(li, words[i].length());
            //backtrack
            li.remove(li.size()-1);
        }
        return result;
    }
    public void backtrack(List<String> li, int l){
        //base
        if(li.size() == l){
            result.add(new ArrayList<>(li));
            return;
        }

        //logic
        int index = li.size();
        StringBuilder sb = new StringBuilder();
        for(String str: li){
            sb.append(str.charAt(index));            
        }
        List<String> allwords = startsWith(sb.toString());
        for(String word: allwords){
            //action
            li.add(word);
             //recurse
            backtrack(li, l);
            //backtrack
            li.remove(li.size()-1);
        }

    }
}